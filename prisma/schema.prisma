generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String  
  image    String?
  password String?
  phone    String?
  emailVerified  DateTime?
  role          String
  Account Account[]
  sessions       Session[]
  schedules      Schedules[]
  tripPackages   TripPackages[]
  @@unique([email])
}


model Schedules {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  scheduleDate Json?  
  location     String
  image        String    @default("https://img.icons8.com/external-kiranshastry-lineal-color-kiranshastry/64/external-map-logistic-delivery-kiranshastry-lineal-color-kiranshastry.png")
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduleId   String
  @@index(userId)
  @@unique([scheduleId])


}


model TripPackages {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  tripdate   Json?
  location   String
  numSpots   Int
  cost       Int
  description String
  tripId     String
  thumbnail  String     @default("https://img.icons8.com/external-filled-outline-lima-studio/64/external-holiday-daily-planner-filled-outline-lima-studio.png") 
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index(userId)
  @@unique([tripId])


}


model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(cuid()) @map("_id")
  sessionToken String  @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}